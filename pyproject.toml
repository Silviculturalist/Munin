[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name            = "pyforestry"
version         = "0.35.0"
description     = "Forest‑model toolkit"
readme          = "README.md"
requires-python = ">=3.10"
authors         = [{name = "Carl Vigren", email = "carl.vigren@slu.se"}]
license         = {text = "MIT"}
urls            = {Homepage = "https://github.com/Silviculturalist/pyforestry"}
dependencies    = [
  "numpy",
  "tqdm",
  "xarray",
  "scipy>=1.5",
  "matplotlib",
  "geopandas",
  "shapely",
  "pyproj"
]

[project.optional-dependencies]

#optional country-specific dependencies
sweden = []
germany = []


all = [
  "pyforestry[sweden]",
  "pyforestry[germany]"
]

#Dev dependencies for writing documentation and testing.
dev = [
  "pytest",
  "pytest-cov",          # measure coverage
  "docstr-coverage",     # docstring coverage
  "coverage",            # coverage engine
  "black",
  "ruff",
  "build",
  "twine",
  "sphinx",              # docs tool
  "furo",                # a popular Sphinx theme
  "myst-parser",         # if you want Markdown support
]

# ----- setuptools‑specific bits -----
[tool.setuptools]
package-dir = {"" = "src"}   # tell setuptools where the code now lives

[tool.setuptools.packages.find]
where = ["src"]              # automatic discovery under src/

# ship **all** shapefile components
[tool.setuptools.package-data]
"pyforestry.sweden.geo.humidity"  = ["humidity.*"]
"pyforestry.sweden.geo.climate"   = ["klimat.*"]
"pyforestry.sweden.geo.coastline" = ["swedishcoastline_ne_medium_clipped.*"]
"pyforestry.sweden.geo.counties"  = ["rt_dlanskod.*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [ #Ignore warning from pyogrio
  "ignore:The 'shapely.geos' module is deprecated:DeprecationWarning:pyogrio"
]
addopts = [
  "--import-mode=importlib",
  "--cov=pyforestry",                # measure your package
  "--cov-report=term-missing",  # show missing lines in console
  "--cov-report=html"           # generate htmlcov/
]

# --- Black Configuration ---
[tool.black]
line-length = 99
target-version = ['py312']

# --- Ruff Configuration ---
[tool.ruff]
line-length = 99
# Enable import-sorting, standard lint rules, and bug-finding
select = ["E", "F", "W", "I", "B"]

[tool.bumpversion]
# Bump the version in this file only. The search pattern allows flexible spacing
# around the equals sign so the command can locate the current value.
files = ["pyproject.toml"]
search = '^version\s*=\s*"{current_version}"'
replace = 'version = "{new_version}"'
current_version = "0.35.0"
