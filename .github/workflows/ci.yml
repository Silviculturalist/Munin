# .github/workflows/ci.yml
name: CI

# Grant write access for Pages deploy
permissions:
  contents: write      # allow pushing commits
  pages: write         # allow updating GitHub Pages

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # Removed 3.13 as it might not be fully supported by all dependencies yet

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --force-reinstall --no-cache-dir .[dev]

      - name: Run tests with coverage
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/dev" || "$GITHUB_BASE_REF" == "dev" ]]; then
            THRESHOLD=90
          elif [[ "$GITHUB_REF" == "refs/heads/main" || "$GITHUB_BASE_REF" == "main" ]]; then
            THRESHOLD=80
          else
            THRESHOLD=50
          fi
          pytest --cov=pyforestry --cov-report=xml --cov-report=html --cov-fail-under=$THRESHOLD

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: ./coverage.xml
          fail_ci_if_error: true
    
  docstring-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Assuming docstr-coverage is in your dev dependencies
          pip install .[dev]

      - name: Generate docstring coverage badge
        # Scans the pyforestry package for docstrings and creates a badge
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/dev" || "$GITHUB_BASE_REF" == "dev" ]]; then
            THRESHOLD=90
          elif [[ "$GITHUB_REF" == "refs/heads/main" || "$GITHUB_BASE_REF" == "main" ]]; then
            THRESHOLD=80
          else
            THRESHOLD=0
          fi
          docstr-coverage src/pyforestry --badge .docstring_coverage.svg --fail-under=$THRESHOLD

      - name: Commit badge
        # Only commit the new badge on pushes to the main branch
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update docstring coverage badge"
          file_pattern: ".docstring_coverage.svg"
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          commit_author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"


  build-and-deploy-docs:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12 # Or your desired version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies and documentation-specific dependencies
          pip install .[dev]
          pip install -r docs/requirements.txt

      # NEW STEP: Generate API documentation .rst files
      - name: Generate API docs
        run: |
          sphinx-apidoc -f -o docs/source/api src/pyforestry

      # MODIFIED STEP: Change to docs directory before building
      - name: Set docs destination
        id: dest
        run: |
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "dir=stable" >> $GITHUB_OUTPUT
          else
            echo "dir=dev" >> $GITHUB_OUTPUT
          fi

      - name: Set DOCS_VERSION env
        run: |
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "DOCS_VERSION=stable" >> $GITHUB_ENV
          else
            echo "DOCS_VERSION=dev" >> $GITHUB_ENV
          fi

      - name: Build Sphinx docs
        run: make html
        working-directory: ./docs

      - name: Copy versions.json
        run: cp docs/versions.json docs/build/html/

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html
          destination_dir: ${{ steps.dest.outputs.dir }}
